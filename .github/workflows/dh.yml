name: CI for dockerhub

on:
  push:
    branches: [ 'main' ]
#TEMP enable all compile 
#    paths:
#      - 'app/**'
#      - 'app3/**'
  workflow_dispatch:
    

concurrency:
  group: ci-tests-${{ github.ref }}-1
  cancel-in-progress: true

env:
  image_prefix: docker.io/dleeha

jobs:
  job1:
    name: pick out changes
    runs-on: ubuntu-latest
    outputs:
       matrix: ${{ steps.setmatrix.outputs.matrix }}
    steps:

      - name: get code changes
        uses: lots0logs/gh-action-get-changed-files@2.1.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: read file
        id: set_var
        run: |
          cat ${HOME}/files.json 
          echo "=========="


          echo "1=========="
          matrixStringifiedObject='{"include":['
          echo "2=========="

          for i in app1 app2 app3; do
            echo "doing i: $i"
            output=$(grep "$i" ${HOME}/files.json || echo "missing")
            echo "output: $output"
            if [ "$output" != "missing" ]; then
              echo -n ""
              if [ "$i" == "app1" ]; then
                matrixStringifiedObject="${matrixStringifiedObject}'{"build-dir":"app1","app-dir":"app/"},'
              elif [ "$i" == "app2" ]; then
                matrixStringifiedObject="${matrixStringifiedObject}'{"build-dir":"app2","app-dir":"app/"},'
              elif [ "$i" == "app3" ]; then
                matrixStringifiedObject="${matrixStringifiedObject}'{"build-dir":"app3","app-dir":""},'
              fi
            fi
          done
          matrixStringifiedObject="${matrixStringifiedObject}"']}'

          echo "matrixString: $matrixStringifiedObject"
          echo "::set-output name=matrix::$matrixStringifiedObject"

      - name: Set Dynamic Matrix
        id: setmatrix
        run: |
           matrixStringifiedObject='{"include":[{"build-dir":"app1","app-dir":"app/"},{"build-dir":"app2","app-dir":"app/"},{"build-dir":"app3","app-dir":""}]}'
           echo "matrixString: $matrixStringifiedObject"
           echo "::set-output name=matrix::$matrixStringifiedObject"

  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          matrix=$((
            echo '{ "include" : ['
            #sed -n "/^REVDEP *:= */ { s///; p }" revdep-dev/Makefile | sed 's/ /, /g' | xargs -n 1 echo | sed -r 's/^([^,]*)(,?)$/"\1"\2/'
            echo 'app1 app2 app3' | sed 's/ /, /g' | xargs -n 1 echo | sed -r 's/^([^,]*)(,?)$/"\1"\2/'
            echo " ]}"
          ) | jq -c .)
          echo $matrix
          echo $matrix | jq .
          echo "::set-output name=matrix::$matrix"



  check-matrix:
    runs-on: ubuntu-latest
    needs: [matrix,job1]
    steps:
      - name: Install json2yaml
        run: |
          sudo npm install -g json2yaml

      - name: Check matrix definition
        run: |
          matrix='${{ needs.matrix.outputs.matrix }}'
          echo $matrix
          echo $matrix | jq .
          echo $matrix | json2yaml

      - name: Check matrix definition 2
        run: |
          matrix='${{ needs.job1.outputs.matrix }}'
          echo $matrix
          echo $matrix | jq .
          echo $matrix | json2yaml


  build:
    name: build push DockerHub
    runs-on: ubuntu-latest
    needs: job1
    strategy:
      matrix: ${{fromJson(needs.job1.outputs.matrix)}}
      #matrix:
        #include: []
          #- build-dir: app1
          #  app-dir: app/
          #- build-dir: app2
          #  app-dir: app/
          #- build-dir: app3
          #  app-dir: ""

    steps:


    - name: print status only if found for ${{ matrix.build-dir }}
      if: steps.set_var.outputs.${{ matrix.build-dir }}searchStatus == 'found'
      run: |
        echo "found"

    - name: print status only if missing for ${{ matrix.build-dir }}
      if: steps.set_var.outputs.${{ matrix.build-dir }}searchStatus == 'missing'
      run: |
        echo "missing"

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

#    - name: setup structure TEMP
#      run: |
#        cd app
#        ln -s ../app3 .

    - name: ${{ matrix.build-dir }} - Set version info
      run: |
        cd ${{ matrix.app-dir }}${{ matrix.build-dir }}
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        echo "my_tag=${GITHUB_REF##*/}-${git_hash}" >> $GITHUB_ENV

        folder=$(pwd)
        echo "folder=${folder}"
        app_name="${folder##*/}"

        #echo "my_image=${{ env.image_prefix }}/${app_name}" >> $GITHUB_ENV

    - name: ${{ matrix.build-dir }} - Build and push to docker hub
      uses: docker/build-push-action@v2
      with:
        context: ./${{ matrix.app-dir }}${{ matrix.build-dir }}
        push: true
        tags: ${{ env.image_prefix }}/${{ matrix.build-dir }}:${{ env.my_tag }}

    - name: ${{ matrix.build-dir }} - Update Version in manifest
      run: |
          version=$(cat ./${{ matrix.app-dir }}${{ matrix.build-dir }}/charts/${{ matrix.build-dir }}/values.yaml | grep version: | awk '{print $2}')
          #sed -i "s|$version|${GITHUB_REF##*/}-${my_tag}|" ./${{ matrix.build-dir }}/charts/${{ matrix.build-dir }}/values.yaml
          sed -i "s|$version|${{ env.image_prefix }}/${{ matrix.build-dir }}:${my_tag}|" ./${{ matrix.app-dir }}${{ matrix.build-dir }}/charts/${{ matrix.build-dir }}/values.yaml

    - name: ${{ matrix.build-dir }} - Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.build-dir }}-artifact
        path: ./${{ matrix.app-dir }}${{ matrix.build-dir }}/charts/${{ matrix.build-dir }}/values.yaml
        if-no-files-found: error
        retention-days: 3

  update_manifest:
    needs: build
    name: updates manifest for k8s deployment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

#    - name: setup structure TEMP
#      run: |
#        cd app
#        ln -s ../app3 .

    - uses: actions/download-artifact@v3
      env: 
        app_name: app1
      with:
        name: ${{ env.app_name }}-artifact
        path: ./app/${{ env.app_name }}/charts/${{ env.app_name }}

    - uses: actions/download-artifact@v3
      env: 
        app_name: app2
      with:
        name: ${{ env.app_name }}-artifact
        path: ./app/${{ env.app_name }}/charts/${{ env.app_name }}

    - uses: actions/download-artifact@v3
      env: 
        app_name: app3
      with:
        name: ${{ env.app_name }}-artifact
        path: ././${{ env.app_name }}/charts/${{ env.app_name }}

#    - name: teardown structure TEMP
#      run: |
#        cd app
#        rm app3

    - name: Commit and push manifest changes
      uses: devops-infra/action-commit-push@v0.3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        commit_message: Version updated

    
